-- ============================================
-- 🚨 Crypto Alerts Table for N8N Integration
-- ============================================
-- This table stores crypto address alerts generated by N8N workflows

CREATE TABLE IF NOT EXISTS crypto_alerts (
    id SERIAL PRIMARY KEY,
    
    -- Crypto address info
    address VARCHAR(255) NOT NULL,
    address_type VARCHAR(50) DEFAULT 'bitcoin', -- bitcoin, ethereum, solana, etc.
    balance BIGINT DEFAULT 0, -- Balance in smallest unit (satoshis, wei, etc.)
    
    -- Source information
    source_chat VARCHAR(255),
    sender_name VARCHAR(255),
    original_message_id INTEGER,
    
    -- Alert details
    alert_type VARCHAR(50) DEFAULT 'new_address', -- new_address, balance_change, suspicious_activity
    alert_level VARCHAR(20) DEFAULT 'info', -- info, warning, critical
    alert_message TEXT,
    
    -- Processing status
    alert_sent BOOLEAN DEFAULT FALSE,
    processed_by_n8n BOOLEAN DEFAULT TRUE,
    
    -- External data
    blockchain_verified BOOLEAN DEFAULT FALSE,
    blockchain_api_response JSONB,
    
    -- Timestamps
    detected_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    alert_sent_at TIMESTAMP WITH TIME ZONE,
    verified_at TIMESTAMP WITH TIME ZONE,
    
    -- Indexes
    CONSTRAINT unique_address_detection UNIQUE (address, detected_at)
);

-- ============================================
-- 📋 Indexes for Performance  
-- ============================================
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_address ON crypto_alerts(address);
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_detected_at ON crypto_alerts(detected_at);
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_alert_type ON crypto_alerts(alert_type);
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_alert_level ON crypto_alerts(alert_level);
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_alert_sent ON crypto_alerts(alert_sent);
CREATE INDEX IF NOT EXISTS idx_crypto_alerts_source_chat ON crypto_alerts(source_chat);

-- ============================================
-- 📊 View for N8N Dashboard
-- ============================================
CREATE OR REPLACE VIEW crypto_alerts_summary AS
SELECT 
    address,
    address_type,
    balance,
    alert_level,
    source_chat,
    sender_name,
    detected_at,
    alert_sent,
    blockchain_verified,
    CASE 
        WHEN balance > 100000000 THEN 'High Value' -- > 1 BTC
        WHEN balance > 10000000 THEN 'Medium Value' -- > 0.1 BTC  
        WHEN balance > 0 THEN 'Low Value'
        ELSE 'Empty'
    END as balance_category
FROM crypto_alerts
ORDER BY detected_at DESC;

-- ============================================
-- 🔧 Functions for N8N Integration
-- ============================================

-- Function to log new crypto alert
CREATE OR REPLACE FUNCTION log_crypto_alert(
    p_address VARCHAR(255),
    p_address_type VARCHAR(50) DEFAULT 'bitcoin',
    p_balance BIGINT DEFAULT 0,
    p_source_chat VARCHAR(255) DEFAULT NULL,
    p_sender_name VARCHAR(255) DEFAULT NULL,
    p_alert_type VARCHAR(50) DEFAULT 'new_address',
    p_alert_level VARCHAR(20) DEFAULT 'info',
    p_blockchain_response JSONB DEFAULT NULL
)
RETURNS INTEGER AS $$
DECLARE
    alert_id INTEGER;
BEGIN
    INSERT INTO crypto_alerts (
        address, 
        address_type, 
        balance, 
        source_chat, 
        sender_name, 
        alert_type, 
        alert_level,
        blockchain_verified,
        blockchain_api_response
    ) VALUES (
        p_address,
        p_address_type,
        p_balance,
        p_source_chat,
        p_sender_name,
        p_alert_type,
        p_alert_level,
        CASE WHEN p_blockchain_response IS NOT NULL THEN TRUE ELSE FALSE END,
        p_blockchain_response
    )
    RETURNING id INTO alert_id;
    
    RETURN alert_id;
END;
$$ LANGUAGE plpgsql;

-- Function to mark alert as sent
CREATE OR REPLACE FUNCTION mark_alert_sent(p_alert_id INTEGER)
RETURNS BOOLEAN AS $$
BEGIN
    UPDATE crypto_alerts 
    SET alert_sent = TRUE, alert_sent_at = NOW()
    WHERE id = p_alert_id;
    
    RETURN FOUND;
END;
$$ LANGUAGE plpgsql;

-- Function to get recent high-value alerts
CREATE OR REPLACE FUNCTION get_recent_high_value_alerts(hours_back INTEGER DEFAULT 24)
RETURNS TABLE(
    alert_id INTEGER,
    address VARCHAR(255),
    balance_btc DECIMAL,
    source_chat VARCHAR(255),
    detected_at TIMESTAMP WITH TIME ZONE
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        ca.id,
        ca.address,
        (ca.balance::DECIMAL / 100000000), -- Convert satoshis to BTC
        ca.source_chat,
        ca.detected_at
    FROM crypto_alerts ca
    WHERE ca.detected_at > NOW() - INTERVAL '1 hour' * hours_back
    AND ca.balance > 10000000 -- > 0.1 BTC
    ORDER BY ca.balance DESC, ca.detected_at DESC;
END;
$$ LANGUAGE plpgsql;

-- ============================================
-- 🧹 Cleanup Function
-- ============================================
CREATE OR REPLACE FUNCTION cleanup_old_crypto_alerts()
RETURNS INTEGER AS $$
DECLARE
    deleted_count INTEGER;
BEGIN
    -- Delete alerts older than 90 days with no balance
    DELETE FROM crypto_alerts 
    WHERE detected_at < NOW() - INTERVAL '90 days'
    AND balance = 0
    AND alert_level = 'info';
    
    GET DIAGNOSTICS deleted_count = ROW_COUNT;
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql;

-- ============================================
-- 🔐 Grant permissions
-- ============================================
GRANT ALL PRIVILEGES ON crypto_alerts TO solanagram_user;
GRANT ALL PRIVILEGES ON crypto_alerts_id_seq TO solanagram_user;
GRANT EXECUTE ON FUNCTION log_crypto_alert(VARCHAR, VARCHAR, BIGINT, VARCHAR, VARCHAR, VARCHAR, VARCHAR, JSONB) TO solanagram_user;
GRANT EXECUTE ON FUNCTION mark_alert_sent(INTEGER) TO solanagram_user;
GRANT EXECUTE ON FUNCTION get_recent_high_value_alerts(INTEGER) TO solanagram_user;
GRANT EXECUTE ON FUNCTION cleanup_old_crypto_alerts() TO solanagram_user;

-- ============================================
-- 📝 Update schema version
-- ============================================
UPDATE db_info SET value = '1.3.0', updated_at = NOW() WHERE key = 'schema_version';

-- Success message
DO $$
BEGIN
    RAISE NOTICE '✅ Crypto alerts table created successfully!';
    RAISE NOTICE '📊 New table: crypto_alerts';
    RAISE NOTICE '🔍 New view: crypto_alerts_summary';
    RAISE NOTICE '🔧 New functions: log_crypto_alert(), mark_alert_sent(), get_recent_high_value_alerts()';
    RAISE NOTICE '🧹 New cleanup function: cleanup_old_crypto_alerts()';
    RAISE NOTICE '📝 Schema version updated to 1.3.0';
    RAISE NOTICE '🤖 Ready for N8N integration!';
END $$; 